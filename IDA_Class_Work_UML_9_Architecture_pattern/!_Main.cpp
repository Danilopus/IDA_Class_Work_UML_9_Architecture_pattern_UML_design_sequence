//class template version 5.0 //07.07.2023//

// Class Work 11.09.2023 -------------------------------------------	

/// Архитектурные паттерны

/* 

Модели построения программ:
1. Модель слоев
	1.1 Максимум 5 слоев
	1.2 Линейные связи между слоями
	1.3 Один из слоев - управляющий (в Qt - UI)
2. Микросервисы - микроприложения, взаимодействующие с ядром


/// Многослойные паттерны ///

--- MVP (alternative names) ---

[P]resenter (UI) - слой интерфейса пользователя
[V]iewer (Communicate) - слой представления данных
[M]odel (Domain) -  слой базовой логики модели
*DAL - data access layer - иногда выделяют из слоя Model/Domain
**DTO - data transfer object (может быть выделен из слоя Domain/Communicate)

1* каждый слой - отдельное простанство имен
2* еще большее разделение - каждый слой в виде подключаемой библиотеки (отдельного приложения)
3* слои высокоавтономны
4* абстрактное взаимодействие слоев через DTO/текст


Плюсы:
	1) гибкость изменений в слоях
Минусы:
	1) более длительная разработка

 
 --- MVVM ---

 [V]iew = MVP:Presenter
 [V]iew[M]odel = MVP:Viewer
 [M]odel = MVP:Model


 Особенности:
 * тесная связь между [VM] и [M] с примением прямого использования

Плюсы:
  1) легко изменяемый UI
  2) ускоренная разработка прототипа приложения
Минусы:
  1) не гибкое изменение логики модели (изменения в [M] и [VM])



/// Модульные паттерны ///

--- MVC ---


[V]iewer <-> [C]ontroller <-> [M]odel
	^____________________________|

Viewer - UI
Contoller - способы передачи данных
Model - logic model

* абстрактное взаимодействие слоев через DTO/текст	 	

*/


/// Этапы разработки UML

/*
1. USE-CASE
2. Понять как работают процессы в прецедентов
	2.1 Диаграмма коммуникаций
	2.2 Диаграмма активности

3. Определение абстракций, категорий

4. Диаграмма компонентов - определение интерфейсов взаимодействия, возможность/необходимость применения паттернов
	4.1 между слоями
	4.2 между отдельными компонентов

5. Архитектурные решения: разделение пользователей

6. Диаграмма классов
	6.1 в первую очередь Model/Domain логику
	6.2 UI 
	6.3 View

7. Диаграмма развертывания

8. Поведенческие диаграммы для сложных/непонятных задач/процессов: диаграммы последовательности, состояний, активности

9. Переход к написанию кода. Корректируем UML-проект приложения если:
	9.1 вносить уточнения (название методов, типы аргументов) - поддерживать соответствие между UML и кодовой моделью
	9.2 при возникновении архитектурных конфликтов


*/


// MAIN ------- MAIN ------- MAIN ------- MAIN ------- MAIN --------
int main(){}


